#!/usr/bin/env pvbatch
from __future__ import print_function, division
import os,argparse
from paraview.simple import *

# Commandline arguments
argpar = argparse.ArgumentParser(prog='genpng', description='Generate PNG animations from Ensight files')
argpar.add_argument('infile',type=str,help='EnsightGold case file')
argpar.add_argument('outfile',type=str,help='Output file name')
argpar.add_argument('-p','--path',type=str,help='Path to the output file (default: ./)',dest='path')

args = argpar.parse_args()
if not args.path: args.path = './'

os.makedirs(args.path,exist_ok=True)
infile  = args.infile
outfile = os.path.join(args.path,args.outfile)

#### disable automatic camera reset on 'Show'
paraview.simple._DisableFirstRenderCameraReset()
#--------------------------------
# Reader
#--------------------------------
reader = EnSightReader(CaseFileName=infile)
reader.PointArrays = ['ETA', 'U', 'V', 'PVORT']
animationScene = GetAnimationScene()
animationScene.UpdateAnimationUsingDataTimeSteps()
renderView    = GetActiveViewOrCreate('RenderView')
readerDisplay = Show(reader, renderView)
eTALUT = GetColorTransferFunction('ETA')
eTAPWF = GetOpacityTransferFunction('ETA')
readerDisplay.Representation = 'Surface'
readerDisplay.ColorArrayName = ['POINTS', 'ETA']
readerDisplay.LookupTable = eTALUT
readerDisplay.ScalarOpacityFunction = eTAPWF
renderView.ResetCamera()
readerDisplay.SetScalarBarVisibility(renderView, True)
renderView.Update()
ColorBy(readerDisplay, ('POINTS', 'PVORT'))
HideScalarBarIfNotNeeded(eTALUT, renderView)
readerDisplay.RescaleTransferFunctionToDataRange(True, False)
readerDisplay.SetScalarBarVisibility(renderView, True)
#--------------------------------
# Color bar
#--------------------------------
LUT  = GetColorTransferFunction('PVORT')
LUT.ApplyPreset('Rainbow Desaturated', True)
LUT.RescaleTransferFunction(-4e-07, 8e-08)
PWF  = GetOpacityTransferFunction('PVORT')
PWF.RescaleTransferFunction(-4e-07, 8e-08)
TF2D = GetTransferFunction2D('PVORT')
TF2D.RescaleTransferFunction(-4e-07, 8e-08, 0.0, 1.0)
renderView.OrientationAxesVisibility = 0
#--------------------------------
# Scalar bar
#--------------------------------
ColorBar = GetScalarBar(LUT,renderView)
ColorBar.Orientation     = 'Horizontal'
ColorBar.WindowLocation  = 'Any Location'
ColorBar.Position        = [0.33458333333333345, 0.052656249999999793]
ColorBar.ScalarBarLength = 0.32999999999999985
#--------------------------------
# Render view layout and size
#--------------------------------
layout = GetLayout()
layout.SetSize(1920, 1024)
#-----------------------------------
# saving camera placements for views
renderView.InteractionMode     = '2D'
renderView.CameraPosition      = [44.67058120183521, -25.114544726202052, 186.55126314388704]
renderView.CameraFocalPoint    = [44.67058120183521, -25.114544726202052, 0.0]
renderView.CameraParallelScale = 24.76651392505024
#--------------------------------
# Animation
#--------------------------------
animation = GetAnimationScene()
animation.UpdateAnimationUsingDataTimeSteps()
time_keeper = animation.TimeKeeper
time        = time_keeper.TimestepValues
# Frames loop
ni = len(time)
for ii,t in enumerate(time):
	# Print some info
	print('(%.2f%%) processing frame %d of %d at time %.2f'%(float(ii)/float(ni)*100.,ii+1,ni,t),flush=True)
	# Save screenshot
	SaveScreenshot(outfile%(ii+1),renderView)
	# Next frame
	animation.GoToNext()